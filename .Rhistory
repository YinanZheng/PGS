a[2, , drop = FALSE]
a <- matrix(1:4, nrow = 2)
a[2, ,]
a <- matrix(1:4, nrow = 2)
a[2, ]
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
datarun = datarun
M.chunk = M.chunk.obj$nextElem
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
M.chunk.obj = iblkcol(M, chunks = chunks)
datarun = datarun
M.chunk = M.chunk.obj$nextElem
do.call('rbind', lapply( seq_len(n$nextElem), doOne, datarun, M.chunk))
n$nextElem
n = idiv(L.M, chunks = chunks)
M.chunk.obj = iblkcol(M, chunks = chunks)
datarun = datarun
M.chunk = M.chunk.obj$nextElem
do.call('rbind', lapply( seq_len(n$nextElem), doOne, datarun, M.chunk))
n = idiv(L.M, chunks = chunks)
n$nextElem
n = idiv(L.M, chunks = chunks)
n$nextElem()
idiv(L.M, chunks = chunks)
n = idiv(L.M, chunks = chunks)
datarun = datarun
M.chunk = M.chunk.obj$nextElem
do.call('rbind', lapply( seq_len(n$nextElem()), doOne, datarun, M.chunk))
M.chunk.obj = iblkcol(M, chunks = chunks)
M.chunk.obj$nextElem()
M.chunk.obj = iblkcol(M, chunks = chunks)
datarun = datarun
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n$nextElem()), doOne, datarun, M.chunk))
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
datarun = datarun
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
iblkcol = iblkcol
datarun = datarun
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
iblkcol <- function(a, ...) {
i <- 1
it <- idiv(ncol(a), ...)
nextEl <- function() {
n <- nextElem(it)
r <- seq(i, length=n)
i <<- i + n
a[,r, drop=FALSE]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('abstractiter', 'iter')
obj
}
datarun = datarun
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
idiv
nextElem
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
library(iterator)
iblkcol <- function(a, ...) {
i <- 1
it <- idiv(ncol(a), ...)
nextEl <- function() {
n <- nextElem(it)
r <- seq(i, length=n)
i <<- i + n
a[,r, drop=FALSE]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('abstractiter', 'iter')
obj
}
datarun = datarun
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
library(iterators)
iblkcol <- function(a, ...) {
i <- 1
it <- idiv(ncol(a), ...)
nextEl <- function() {
n <- nextElem(it)
r <- seq(i, length=n)
i <<- i + n
a[,r, drop=FALSE]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('abstractiter', 'iter')
obj
}
datarun = datarun
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
M.chunk.obj$nextElem()
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
do.call('rbind', lapply( seq_len(21), doOne, datarun, M.chunk))
chunks <- getDoParWorkers()
M.chunk.obj = iblkcol(M, chunks = chunks)
iblkcol <- function(a, ...) {
i <- 1
it <- idiv(ncol(a), ...)
nextEl <- function() {
n <- nextElem(it)
r <- seq(i, length=n)
i <<- i + n
a[,r, drop=FALSE]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('abstractiter', 'iter')
obj
}
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
library(iterators)
iblkcol <- function(a, ...) {
i <- 1
it <- idiv(ncol(a), ...)
nextEl <- function() {
n <- nextElem(it)
r <- seq(i, length=n)
i <<- i + n
a[,r, drop=FALSE]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('abstractiter', 'iter')
obj
}
datarun = datarun
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind', .packages = ("iterators")) %dopar% {
iblkcol <- function(a, ...) {
i <- 1
it <- idiv(ncol(a), ...)
nextEl <- function() {
n <- nextElem(it)
r <- seq(i, length=n)
i <<- i + n
a[,r, drop=FALSE]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('abstractiter', 'iter')
obj
}
datarun = datarun
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
chunks
chunk2s <- getDoParWorkers()
M.chunk.obj = iblkcol(M, chunks = chunks)
r <- foreach(n = idiv(L.M, chunks = chunk2s), .combine = 'rbind', .packages = ("iterators")) %dopar% {
iblkcol <- function(a, ...) {
i <- 1
it <- idiv(ncol(a), ...)
nextEl <- function() {
n <- nextElem(it)
r <- seq(i, length=n)
i <<- i + n
a[,r, drop=FALSE]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('abstractiter', 'iter')
obj
}
datarun = datarun
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind', .packages = ("iterators")) %dopar% {
iblkcol <- function(a, ...) {
i <- 1
it <- idiv(ncol(a), ...)
nextEl <- function() {
n <- nextElem(it)
r <- seq(i, length=n)
i <<- i + n
a[,r, drop=FALSE]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('abstractiter', 'iter')
obj
}
datarun = datarun
M.chunk.obj = iblkcol(M, chunks = chunks)
M.chunk = M.chunk.obj$nextElem()
do.call('rbind', lapply( seq_len(n), doOne, datarun, M.chunk))
}
M.chunk.obj$nextElem()
M.chunk.obj$nextElem()
M.chunk.obj$nextElem()
M.chunk.obj$nextElem()
M.chunk.obj$nextElem()
M.chunk.obj$nextElem()
M.chunk.obj$nextElem()
M.chunk.obj$nextElem()
M.chunk.obj$nextElem()
chunks <- getDoParWorkers()
glm
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
chunks <- getDoParWorkers()
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
r <- foreach(n=idiv(10000, chunks=chunks), .combine='cbind') %dopar% {
y <- lapply(seq_len(n), function(i) {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
})
do.call('cbind', y)
}
r
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
datarun = datarun
M = M
do.call('rbind', lapply( seq_len(n), doOne, datarun, M))
}
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
datarun = datarun
M = M
do.call('rbind', lapply( seq_len(n), function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
if("try-error" %in% class(model)){
b <- rep(NA, 3)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}, datarun, M))
}
r
modelstatement
datarun
i=1
datarun$Mone <- M[,i]
try(lmer(modelstatement, data = datarun)
)
class(model)
model <- try(lmer(modelstatement, data = datarun))
class(model)
"try-error" %in% class(model)
summary(model)
summary(model)$coefficients
modelstatement = modelstatement_LMM
doOne <- function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
# if("try-error" %in% class(model)){
# b <- rep(NA, 3)
# } else {
# res=summary(model)$coefficients
# b <- as.numeric(res[2,])
# }
invisible(b)
}
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
datarun = datarun
M = M
do.call('rbind', lapply( seq_len(n), function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
if("try-error" %in% class(model)){
b <- rep(NA, 3)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}, datarun, M))
}
r
r <- foreach(n = idiv(L.M, chunks = chunks), .combine = 'rbind') %dopar% {
# datarun = datarun
# M = M
do.call('rbind', lapply( seq_len(n), function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
if("try-error" %in% class(model)){
b <- rep(NA, 3)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}, datarun, M))
}
r
nworkers <- getDoParWorkers()
r <- foreach(n = idiv(L.M, chunks = nworkers), M_chunk = iblkcol(M, chunks = nworkers),.combine = 'rbind') %dopar% {
datarun = datarun
do.call('rbind', lapply( seq_len(n), function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
if("try-error" %in% class(model)){
b <- rep(NA, 3)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}, datarun, M.chunk))
}
r <- foreach(n = idiv(L.M, chunks = nworkers), M_chunk = iblkcol(M, chunks = nworkers),.combine = 'rbind') %dopar% {
datarun = datarun
do.call('rbind', lapply( seq_len(n), function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
if("try-error" %in% class(model)){
b <- rep(NA, 3)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}, datarun, M_chunk))
}
iblkcol(M, chunks = nworkers)
M_chunk
M_chunk = iblkcol(M, chunks = nworkers)
M_chunk$nextElem()
r <- foreach(n = idiv(L.M, chunks = nworkers), M_chunk = iblkcol(M, chunks = nworkers),.combine = 'rbind') %dopar% {
datarun = datarun
y <- lapply( seq_len(n), function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
if("try-error" %in% class(model)){
b <- rep(NA, 3)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}, datarun, M_chunk)
do.call('rbind', y)
}
r <- foreach(n = idiv(L.M, chunks = nworkers), M_chunk = iblkcol(M, chunks = nworkers),.combine = 'rbind') %dopar% {
datarun = datarun
y <- lapply( seq_len(n), function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
# if("try-error" %in% class(model)){
# b <- rep(NA, 3)
# } else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
# }
invisible(b)
}, datarun, M_chunk)
do.call('rbind', y)
}
matrix(1:9,ncol = 3)
r <- foreach(n = idiv(L.M, chunks = nworkers), M_chunk = iblkcol(M, chunks = nworkers),.combine = 'rbind') %dopar% {
datarun = datarun
y <- lapply( seq_len(n), function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
# if("try-error" %in% class(model)){
# b <- rep(NA, 3)
# } else {
res=matrix(1:9,ncol = 3)
b <- as.numeric(res[2,])
# }
invisible(b)
}, datarun, M_chunk)
do.call('rbind', y)
}
r
try
r <- foreach(n = idiv(L.M, chunks = nworkers), M_chunk = iblkcol(M, chunks = nworkers),.combine = 'rbind', .packages = c('lme4')) %dopar% {
datarun = datarun
y <- lapply( seq_len(n), function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
# if("try-error" %in% class(model)){
# b <- rep(NA, 3)
# } else {
res= summary(model)$coefficients
b <- as.numeric(res[2,])
# }
invisible(b)
}, datarun, M_chunk)
do.call('rbind', y)
}
r
if ((method == "LMM")[1])
{
modelstatement = modelstatement_LMM
doOne <- function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
if("try-error" %in% class(model)){
b <- rep(NA, 3)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}
}
r <- foreach(n = idiv(L.M, chunks = nworkers), M_chunk = iblkcol(M, chunks = nworkers),.combine = 'rbind', .packages = c('lme4')) %dopar% {
# datarun = datarun
do.call('rbind',lapply( seq_len(n), doOne, datarun, M_chunk) )
}
r
M.names[1]
method = "GEE"
if ((method == "GEE")[1])
{
modelstatement = modelstatement_GEE
doOne <- function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(geeglm(modelstatement, data = datarun, id = id.vect))
if("try-error" %in% class(model)){
b <- rep(NA, 4)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}
}
r <- foreach(n = idiv(L.M, chunks = nworkers), M_chunk = iblkcol(M, chunks = nworkers),.combine = 'rbind', .packages = c('lme4',"geepack")) %dopar% {
# datarun = datarun
do.call('rbind',lapply( seq_len(n), doOne, datarun, M_chunk) )
}
r
num_cores = 1
r <- foreach(n = idiv(L.M, chunks = num_cores), M_chunk = iblkcol(M, chunks = num_cores),.combine = 'rbind', .packages = c('lme4',"geepack")) %dopar% {
do.call('rbind',lapply( seq_len(n), doOne, datarun, M_chunk) )
}
results <- foreach(n = idiv(L.M, chunks = num_cores), M_chunk = iblkcol(M, chunks = num_cores),.combine = 'rbind', .packages = c('lme4',"geepack")) %dopar% {
do.call('rbind',lapply( seq_len(n), doOne, datarun, M_chunk) )
}
method = "LMM"
M.names = colnames(M)
L.M = dim(M)[2]
if (is.null(COV))
{
datarun = data.frame(id.vect = id.vect, y.vect=y.vect, Mone = NA)
modelstatement_LMM = y.vect ~ Mone + (1|id.vect)
modelstatement_GEE = y.vect ~ Mone
} else {
COV <- data.frame(COV)
COV <- data.frame(model.matrix(~.,COV))[,-1]
conf.names = colnames(COV)
datarun = data.frame(id.vect = id.vect, y.vect=y.vect, Mone = NA, COV = COV)
modelstatement_LMM = eval(parse(text=(paste0("y.vect ~ Mone +", paste0(paste0("COV.",conf.names),collapse = "+"), "+ (1|id.vect)"))))
modelstatement_GEE = eval(parse(text=(paste0("y.vect ~ Mone +", paste0(paste0("COV.",conf.names),collapse = "+")))))
}
if (parallel == TRUE)
{
num_cores <- detectCores()
cat(paste0("Running pre-ranking with ", num_cores, " cores in parallel...   (",Sys.time(),")\n"))
registerDoParallel(num_cores)
} else {
num_cores <- 1
cat(paste0("Running pre-ranking with single core.\n"))
registerDoSEQ()
}
if ((method == "LMM")[1])
{
modelstatement = modelstatement_LMM
doOne <- function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(lmer(modelstatement, data = datarun))
if("try-error" %in% class(model)){
b <- rep(NA, 3)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}
}
if ((method == "GEE")[1])
{
modelstatement = modelstatement_GEE
doOne <- function(i, datarun, M){
datarun$Mone <- M[,i]
model <- try(geeglm(modelstatement, data = datarun, id = id.vect))
if("try-error" %in% class(model)){
b <- rep(NA, 4)
} else {
res=summary(model)$coefficients
b <- as.numeric(res[2,])
}
invisible(b)
}
}
results <- foreach(n = idiv(L.M, chunks = num_cores), M_chunk = iblkcol(M, chunks = num_cores),.combine = 'rbind', .packages = c('lme4',"geepack")) %dopar% {
do.call('rbind',lapply( seq_len(n), doOne, datarun, M_chunk) )
}
num_cores
results <- foreach(n = idiv(L.M, chunks = num_cores), M_chunk = iblkcol(M, chunks = num_cores),.combine = 'rbind', .packages = c('lme4',"geepack")) %dopar% {
do.call('rbind',lapply( seq_len(n), doOne, datarun, M_chunk) )
}
head(resutls)
head(results)
rownames(results) = M.names
