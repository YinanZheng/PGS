library(geepack)
library(mvtnorm)
library(cvTools)

require("RCurl")
### Load PGS functions
script <- getURL("https://raw.githubusercontent.com/feizhe/PGS/master/functions",ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv)

run=100  # Run 100 times
n=120    # Sample size = 120
m=2      # Two measurements for each sample
pn=200;str.y="ar1";beta.true=c(1,1,.2,.1,.06,.03,rep(0,194))
rho=0.5;sigma2=1;lam.vect=seq(1:10)*0.03-0.02;PM=seq(1:10)*20;fold=10;eps=10^(-7);eps.stop=10^(-7);max.step=50


  Beta.shrink.ar1.mat<-NULL
  Var.sand.ar1.mat<-NULL
  Flag.stop.ar1.vect<-NULL
  
  Alpha.ar1.vect<-NULL
  Est.sigma2.ar1.vect<-NULL
  
  GRID.ERR<-NULL
  LAM.SEL<-NULL
  
  for (i in 1:run)
  {
    print(i)
    
    grid.err<-matrix(nrow=length(PM),ncol=length(lam.vect))
    lam.sel<-NULL
    beta.shrink.ar1.mat<-NULL
    var.sand.ar1.mat<-NULL
    flag.stop.ar1.vect<-NULL
    
    alpha.ar1.vect<-NULL
    est.sigma2.ar1.vect<-NULL
    
    
    data.temp<-generate_normal(n, pn, m, str.y, beta.true, rho, sigma2)
    y.vect<-data.temp$y.vect
    x.mat<-data.temp$x.mat
    id.vect<-data.temp$id.vect 
    
    cvgrps<-cvFolds(n, K = fold,type = "random")
    
    for (k in 1:length(PM)){
      pm<-PM[k]
      print(pm)
      temp.run<-one_run_grid(y.vect, x.mat[,1:pm], id.vect, n, pm, m, rho, lam.vect, fold, eps, eps.stop, max.step)
      
      grid.err[k,]<-temp.run$lam.cv.vect
      lam.sel=c(lam.sel, temp.run$lam.sel.ar1)
      
      beta.shrink.ar1.mat=c(beta.shrink.ar1.mat, temp.run$beta.shrink.ar1)
      var.sand.ar1.mat=c(var.sand.ar1.mat, temp.run$var.sand.ar1)
      flag.stop.ar1.vect=c(flag.stop.ar1.vect, temp.run$flag.stop.ar1)
      
      alpha.ar1.vect=c(alpha.ar1.vect, temp.run$alpha.ar1)
      est.sigma2.ar1.vect<-c(est.sigma2.ar1.vect, temp.run$est.sigma2.ar1)
      
    }
    LAM.SEL<-rbind(LAM.SEL,lam.sel)
    GRID.ERR<-rbind(GRID.ERR,grid.err)
    
    Beta.shrink.ar1.mat<-rbind(Beta.shrink.ar1.mat,beta.shrink.ar1.mat)
    Var.sand.ar1.mat<-rbind(Var.sand.ar1.mat,var.sand.ar1.mat)
    Flag.stop.ar1.vect<-rbind(Flag.stop.ar1.vect,flag.stop.ar1.vect)
    
    Alpha.ar1.vect<-rbind(Alpha.ar1.vect,alpha.ar1.vect)
    Est.sigma2.ar1.vect<-rbind(Est.sigma2.ar1.vect,est.sigma2.ar1.vect)
    
    write.table(GRID.ERR,"GRIDERR")
    write.table(LAM.SEL,"LAMSEL")
    write.table(Beta.shrink.ar1.mat,"Beta.shrink.ar1")
    write.table(Var.sand.ar1.mat,"Var.sand.ar1.mat")
    write.table(Flag.stop.ar1.vect,"Flag.stop.ar1.vect")
    write.table(Alpha.ar1.vect,"Alpha.ar1.vect")
    write.table(Est.sigma2.ar1.vect,"Est.sigma2.ar1.vect")
  }


generate_normal<-function(n, pn, m, str.y, beta.true, rho, sigma2)
{
  
  y.vect<-NULL
  x.mat<-NULL
  id.vect<-rep(1:n, each=m)
  
  R<-matrix(0,m,m)
  
  if(str.y=="exch")
    R<-matrix(rho,m,m)+diag(rep(1-rho,m))
  if(str.y=="ar1")
  {
    for (i in 1:m)
      R[i,]<-rho^(abs((1:m)-i))  
  }
  
  SIGMA<-sigma2*R
  
  X.sigma<-matrix(0,(pn),(pn))

    for (i in 1:(pn)){
      X.sigma[i,]<-0.7^(abs((1:(pn))-i))  
  }
  
  x.mat<-as.matrix(rmvnorm(n*m, mean=rep(0,(pn)), X.sigma))
  
  #x.mat<-cbind(rbinom(n*m,1, 0.5), x.mat)
  
  y.temp<-x.mat%*%matrix(beta.true, ncol=1)
  error<-rmvnorm(n, mean=rep(0,m),SIGMA)
  
  y.vect<-y.temp+as.vector(t(error))   
  
  id.vect<-rep(1:n, each=m) 
  
  return(list(y.vect=y.vect, x.mat=x.mat, id.vect=id.vect, m=m, n=n, pn=pn, beta.true=beta.true, rho=rho, str.y=str.y))
  
}
