### Initiate a folder for storing the results
setwd("YourPath/")

### Install Package "RCurl" to access dataset and source R code from GitHub
#install.packages("RCurl")
require("RCurl")

### Load PGS functions
script <- getURL("https://raw.githubusercontent.com/feizhe/PGS/master/functions",ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv)

### Load Sample data
DATA<-read.csv(text=getURL("https://raw.githubusercontent.com/feizhe/PGS/master/SampleData.csv",ssl.verifypeer = FALSE))

y.vect<-DATA$FEV1      ###Extract dependent variable
id.vect<-DATA$SID      ###Extract subjuect id variable to indicate repeated measures
M<-as.matrix(DATA[,4:169])        ###Extract microRNA data matrix (row=samples, column=miRNA probes)
COV<-as.matrix(DATA[,170:179])    ###Extract covariate data matrix
mirnames=colnames(M)
conf.names=colnames(COV)

##################transformation of some of the confounders
pdf("hist_confounders.pdf")##############look at empirical distribution of each confounder
par(mfrow=c(3,1))
for (i in 1:length(conf.names)){
  xname<-conf.names[i]
  hist(COV[,i],xlab=xname)
}
dev.off()

COV$female<-COV$SEX-1
COV$logpm25<-log(COV$pm25)
COV$CIGS<-1-(COV$CIGS_WEAR==0)
COV$logWAY_TIME<-(log(COV$WAY_TIME))
COV$HEAT_CENTER<-COV$HEAT_CENTER-1                ###########transform to indicator
conf.names<-c("logpm25","female","age","bmi","HEAT_CENTER","CIGS","logWAY_TIME","WORK_HR_DAY","DEWP","Atemp")
COV<-COV[,conf.names]

pdf("hist_confounders_transformed.pdf") ##############look at transformed confounders
par(mfrow=c(3,1))
for (i in 1:length(conf.names)){
  xname<-conf.names[i]
  hist(COV[,i],xlab=xname)
}
dev.off()
##########---- Site-by-site test/Pre-screening with LMM ----##########

ps_lmm<-matrix(ncol=3,nrow=ncol(M))
for(i in 1:ncol(M)){
  g1<-lmer(y.vect~M[,i]+COV+(1|id.vect))      ###########adjusted for the 10 confounders
  ps_lmm[i,2]<-summary(g1)$coefficients[2,1]  #######point estimate
  ps_lmm[i,3]<-summary(g1)$coefficients[2,3]  #######t value
}
ps_lmm[,1]<-seq(from=1,to=ncol(M))  
rownames(ps_lmm)<-colnames(M)
ps_lmm<-ps_lmm[order(-abs(ps_lmm[,3])), ]         #######order by t values
colnames(ps_lmm)<-c("ID","estimate","t-value")
pvalue<-2*(1-pnorm(abs(ps_lmm[,3])))
ps_lmm<-data.frame(cbind(ps_lmm,pvalue))

ps_lmm$BH.FDR=p.adjust(ps_lmm$pvalue,"fdr")     #######calculate Benjamini and Hochberg FDR
ps_lmm$qvalue=qvalue(ps_lmm$pvalue)$qvalues     #######calculate Benjamini and Hochberg FDR

write.csv(ps_lmm,"PS_LMM.csv")


###########---- Site-by-site test/Pre-screening with GEE ----##########

ps_gee<-matrix(ncol=3,nrow=ncol(M))
for(i in 1:ncol(M)){
  g1<-geeglm(y.vect~M[,i]+COV,id=id.vect)
  ps_gee[i,2]<-summary(g1)$coefficients[2,1]
  ps_gee[i,3]<-summary(g1)$coefficients[2,4]
}
ps_gee[,1]<-seq(from=1,to=ncol(M),by=1)
rownames(ps_gee)<-colnames(M)
ps_gee<-data.frame(ps_gee[order(ps_gee[,3]), ])    #######order by p values
colnames(ps_gee)<-c("ID","estimate","pvalue")

ps_gee$BH.FDR=p.adjust(ps_gee$pvalue,"fdr")
ps_gee$qvalue=qvalue(ps_gee$pvalue)$qvalues

write.csv(ps_gee,"PS_GEE.csv")


########################---- Penalized GEE with Grid Search (PGS) ----########################

n=120   ### Sample Size
m=2     ### Repeated measurement times

cvgrps<-cvFolds(n, K = 20,type = "random")  ### Generate a 20-fold cross validation scheme

PS<-read.csv("PS_LMM.csv")  ###Import LMM prescreening results (LMM-based PGS)
#PS<-read.csv("PS_GEE.csv")  ###Import GEE prescreening results (GEE-based PGS)

PM<-c(seq(1:8)*20-10,166)  ### initiate Pm sequence
lam.vect<-seq(0.06,0.24,0.02)  ###initiate lambda sequence

### Run PGS
PGS(y.vect,M,COV,PS,PM,lam.vect,n,m)


########################---- Visualize the Grid Search results with heat plot ----########################
grid.err<-read.csv("grid.csv",row.names=1,check.names=F)
best.ind=which(grid.err==min(grid.err),arr.ind=T)

my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
my_palette <- colorRampPalette(c("black", "gray", "white"))(n = 299)

breaks<-quantile(as.matrix(grid.err),probs = seq(0, 1, 1/3))
col_breaks = c(seq(breaks[1],breaks[2],length=100),  # for red
               seq(breaks[2],breaks[3],length=100),              # for yellow
               seq(breaks[3],breaks[4],length=100))              # for green

heatmap.2(data.matrix(grid.err), 
          xlab=expression(lambda),ylab="Pm",
          main = "Grid Search", # heat map title
          density.info="none",  # turns off density plot inside color legend
          trace="none",         # turns off trace lines inside the heat map
          col=my_palette,       # use on color palette defined earlier 
          breaks=col_breaks,    # enable color transition at specified limits
          dendrogram="none",     # only draw a row dendrogram
          Colv=NULL,Rowv=NULL)  
          mtext(paste0("Optimized Pm=",rownames(grid.err)[best.ind[1]]," lambda=",colnames(grid.err)[best.ind[2]]))

          

